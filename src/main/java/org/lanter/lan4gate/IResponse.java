package org.lanter.lan4gate;

import org.lanter.lan4gate.Messages.Fields.*;
import org.lanter.lan4gate.Messages.OperationsList;

import java.util.Set;

/**
 * Интерфейс класса, представляющего результат разбора ответа от терминала.
 * <br>Для обработки необходимо получить список текущих полей с помощью метода getCurrentFieldsList.
 * <br>Поля, отсутствующие в полученном списке, при попытке получения будут возвращать 0 для чисел,
 * либо null для объектов
 */
public interface IResponse {
    /**
     * Возвращает список установленных полей операции, полученных в ответе от терминала
     *
     * @return Коллекция, содержащая поля операции в соотвествтвии с {@link ResponseFieldsList}
     */
    Set<ResponseFieldsList> getCurrentFieldsList();

    /**
     * Возвращает логический номер ECR, полученный в ответе от терминала
     *
     * @return Логический номер ECR
     */
    int getEcrNumber();

    /**
     * Возвращает логический номер мерчанта в ECR
     *
     * @return Логический номер мерчанта в ECR
     */
    int getEcrMerchantNumber();

    /**
     * Возвращает код операции из ответа
     *
     * @return Код операции в соответствии с {@link OperationsList}
     */
    OperationsList getOperationCode();

    /**
     * Возвращает код оригинальной операции для операций,
     * запрашивающих данные по хранящимся в терминале операциям
     *
     * @return Код операции в соответствии с {@link OperationsList}
     */
    OperationsList getOriginalOperationCode();

    /**
     * Общая сумма операции, включает коммиссии и чаевые
     *
     * @return Общая сумма операции, не более 12 символов
     */
    long getTotalAmount();

    /**
     * Возвращает сумму коммисии, взимаемой эквайером
     *
     * @return Сумма коммисии эквайера, не более 12 символов
     */
    long getAcquirerFeeAmount();

    /**
     * Возвращает сумму коммиссии, взимаемой терминалмо
     *
     * @return Сумма коммиссии терминала, не более 12 символов
     */
    long getTerminalFeeAmount();

    /**
     * Сумма чаевых
     *
     * @return Сумма чаевых, не более 12 символов
     */
    long getTipsAmount();

    /**
     * Возвращает код валюты, используемы в операции
     *
     * @return Код валюты в соответствии с ISO 4217
     */
    int getCurrencyCode();

    /**
     * Возвращает номер чека терминала
     *
     * @return Строка, содержащая номер чека в терминале или null
     */
    String getReceiptReference();

    /**
     * Возвращает RRN выполненной операции, при его наличии
     *
     * @return RRN выполненной операции, иначе null
     */
    String getRRN();

    /**
     * Возвращает статус выполненной операции
     *
     * @return Статус операции в соответствии с {@link StatusList}
     */
    StatusList getStatus();

    /**
     * Возвращает статус оригинальной операции для операций,
     * запрашивающих данные по хранящимся в терминале операциям
     *
     * @return Статус оригинальной операции в соответствии с {@link StatusList}
     */
    StatusList getOriginalOperationStatus();

    /**
     * Возвращает время выполнения операции на хосте
     *
     * @return Строка, содержащая время в формате "YYYYMMDDHHMMSS"
     */
    String getTransDateTime();

    /**
     * Возвращает время выполнения операции в терминале. Может отличаться от времени выполнения на хосте
     *
     * @return Строка, содержащая время в формате "YYYYMMDDHHMMSS"
     */
    String getTerminalDateTime();

    /**
     * Возвращает маскированный PAN карты
     *
     * @return Строка, содержащая маскированный PAN карты. Формат зависит от настроек терминала
     */
    String getCardPAN();

    /**
     * Возвращает срок действия карты
     *
     * @return Строка, содержащая строк действия карты, в формате "YY/MM"
     */
    String getExpireDate();

    /**
     * Возвращает имя держателя карты
     *
     * @return Строка, содержащая имя держателя карты
     */
    String getCardholderName();

    /**
     * Возвращает способ авторизации держателя карты
     *
     * @return Способ авторизации держателя карты в соотвествтвии с {@link CardholderAuthMethodList}
     */
    CardholderAuthMethodList getCardholderAuthMethod();

    /**
     * Возвращает код авторизаци операции на хосте
     *
     * @return Строка, содержащая код авторизации на хосте
     */
    String getAuthCode();

    /**
     * Возвращает код ответа на выполнение операции.
     *
     * @return Строка, содержащая код ответа. Формат зависит от хоста
     */
    String getResponseCode();

    /**
     * Возвращает текст ответа на выполнение операции.
     *
     * @return Строка, возвращающая текст ответа. Язык зависит отустановленно в терминале и/или хосте.
     * Кодировка - UTF-8
     */
    String getResponseText();

    /**
     * Возвращает код авторизации операции в терминале
     *
     * @return Строка, содержащая код авторизации в терминале
     */
    String getSTAN();

    /**
     * Возвращает идентификатор транзакции на хосте.
     *
     * @return Строка, содержащая код авторизации на хосте
     */
    String getTransactionID();

    /**
     * Возвращает идентификатор терминала на хосте
     *
     * @return Строка, содержащая идентификатор терминала на хосте
     */
    String getTerminalID();

    /**
     * Возвращает идентфикатор приложения карты, используемой в операции
     *
     * @return Строка, содержащая идентификатор приложения карты
     */
    String getCardEmvAid();

    /**
     * Возвращает названия приложения карты, используемой в операции
     *
     * @return Строка, содержащая название приложения карты
     */
    String getCardAppName();

    /**
     * Возвращат способ ввод карты
     *
     * @return Способ ввода карты в соответствии с {@link CardInputMethodList}
     */
    CardInputMethodList getCardInputMethod();

    /**
     * Возвращает название платежной системы
     *
     * @return Строка, содержащая название платежной системы
     */
    String getIssuerName();

    /**
     * Дополнительые сведения об операции
     *
     * @return Строка, содержащая дополнительные сведения об операции. Формат зависит от операции
     */
    String getAdditionalInfo();

    /**
     * Шифрованные данные карты, используемой в операции.
     * <br>Либо данные тегов, запрошенных в операции FastTrack
     *
     * @return Строка, содержащая данные карты, в формате "0x0123456789ABCDEF"
     */
    String getCardDataEnc();

    /**
     * Возвращает идентификатор мерчанта на хосте
     *
     * @return Строка, содержащая идентификатор мерчанта на хосте
     * */
    String getMerchantId();

    /**
     * Возвращает ополнительные данные работы с картой для печати на чеке
     *
     * @return Строка с дополнительными данным работы с картой.
     */
    String getTVR();

    /**
     * Возвращает ополнительные данные работы с картой для печати на чеке
     *
     * @return Строка с дополнительными данным работы с картой.
     */
    String getTSI();

    /**
     * Возвращает ополнительные данные работы с картой для печати на чеке
     *
     * @return Строка с дополнительными данным работы с картой.
     */
    String getTC();

    /**
     * Возвращает ополнительные данные работы с картой для печати на чеке
     *
     * @return Строка с дополнительными данным работы с картой.
     */
    String getCID();

    /**
     * Возвращает ополнительные данные работы с картой для печати на чеке
     *
     * @return Строка с дополнительными данным работы с картой.
     */
    String getKVR();

    /**
     * Возвращает ополнительные данные работы с картой для печати на чеке
     *
     * @return Строка с дополнительными данным работы с картой.
     */
    String getCDAResult();

    /**
     * Возвращает количество операций продажи, выполненных с момента последней сверки итогов
     *
     * @return Количество операций продажи
     */
    int getSalesCount();

    /**
     * Возвращает количество операций отмены, выполненных с момента последней сверки итогов
     *
     * @return Количество операций отмены
     */
    int getVoidCount();

    /**
     * Возвращает количество операций возврата, выполненных с момента последней сверки итогов
     *
     * @return Количество операций возврата
     */
    int getRefundCount();

    /**
     * Возвращает массив с краткой информацией об операциях продажи,
     * выполненных с момента последней сверки итогов.
     * <br>Каждый элемент массива представлен в виде класса {@link IResponse}
     * <br>Обработка каждого элемента аналогично обработки родительского объекта
     *
     * @return Массив с операциями продажи
     */
    Set<IResponse> getSalesArray();

    /**
     * Возвращает массив с краткой информацией об операцияъ отмены,
     * выполненных с момента последней сверки итогов.
     * <br>Каждый элемент массива представлен в виде класса {@link IResponse}
     * <br>Обработка каждого элемента аналогично обработки родительского объекта
     *
     * @return Массив с операциями отмены
     */
    Set<IResponse> getVoidArray();

    /**
     * Возвращает массив с краткой информацией об операцияъ возврата,
     * выполненных с момента последней сверки итогов.
     * <br>Каждый элемент массива представлен в виде класса {@link IResponse}
     * <br>Обработка каждого элемента аналогично обработки родительского объекта
     *
     * @return Массив с операциями возврата
     */
    Set<IResponse> getRefundArray();
}
